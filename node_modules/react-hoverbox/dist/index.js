module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(2);
	var _ = __webpack_require__(3);
	var $ = __webpack_require__(4);
	
	module.exports = React.createClass({
	    propTypes: {
	        render: React.PropTypes.func
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    getInitialState: function getInitialState() {
	        return {
	            hover: false
	        };
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	        return !_.isEqual(nextProps, this.props) || !_.isEqual(nextState, this.state) || !_.isEqual(nextContext, this.context);
	    },
	
	    isHovered: function isHovered(element) {
	        try {
	            return element && $(element).is(':hover');
	        } catch (err) {
	            console.error(err);
	        }
	    },
	
	    componentDidMount: function componentDidMount() {
	        var This = this;
	        setTimeout(function () {
	            if (This.isMounted()) {
	                var element = ReactDOM.findDOMNode(This);
	                This.setState({ hover: !!This.isHovered(element) });
	            }
	        }, 1);
	    },
	
	    componentDidUpdate: function componentDidUpdate(prevProps, prevState, prevContext) {
	        var This = this;
	        setTimeout(function () {
	            if (This.isMounted()) {
	                var element = ReactDOM.findDOMNode(This);
	                This.setState({ hover: !!This.isHovered(element) });
	            }
	        }, 1);
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    displayName: 'HoverBox',
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: this.state.hover ? 'hover' : 'not-hover', onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onMouseOver: this.onMouseOver },
	            this.props.render(this.state.hover)
	        );
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    onMouseEnter: function onMouseEnter() {
	        if (this.state.hover == false) {
	            this.setState({ hover: true });
	        }
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    onMouseOver: function onMouseOver() {
	        if (this.state.hover == false) {
	            this.setState({ hover: true });
	        }
	    },
	    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	    onMouseLeave: function onMouseLeave() {
	        if (this.state.hover == true) {
	            this.setState({ hover: false });
	        }
	    }
	});
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	module.exports = require("react");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = require("react-dom");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = require("lodash");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = require("jquery");

/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map